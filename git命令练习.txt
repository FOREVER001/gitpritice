1.选择一个合适的地方，创建一个空目录
如：F:\workspace\gitpractice

2.通过git init命令把这个目录变成Git可以管理的仓库：

git init

Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository），细心的读者可以发现当前目录下多了一个.git的目录，
这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
如果你没有看到.git目录，那是因为这个目录默认是隐藏的，用ls -ah命令就可以看见。
 也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。
  

 

3.把文件添加到版本库
（1）用命令git add告诉Git，把文件添加到仓库：
如：git add git命令练习.txt
（2）用命令git commit告诉Git，把文件提交到仓库：
 git commit -m "wrote a readme file"
 简单解释一下git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
 git commit命令执行成功后会告诉你，1 file changed：1个文件被改动（我们新添加的readme.txt文件）；2 insertions：插入了两行内容（readme.txt有两行内容）。



 为什么Git添加文件需要add，commit一共两步呢？因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
 $ git add file1.txt
$ git add file2.txt file3.txt
$ git commit -m "add 3 files."

小结
现在总结一下今天学的两点内容：

初始化一个Git仓库，使用git init命令。

添加文件到Git仓库，分两步：

使用命令git add <file>，注意，可反复多次使用，添加多个文件；
使用命令git commit -m <message>，完成。

3.关联远程库
然后，把本地仓库的内容推送到GitHub仓库
git remote add origin git@github.com:michaelliao/learngit.git

添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库

4.下一步，就可以把本地库的所有内容推送到远程库上：
 git push -u origin master

 把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。
 由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
 Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

  推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：


  从现在起，只要本地作了提交，就可以通过命令：
  git push origin master
  把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！


小结

要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；

关联后，使用命令git push -u origin master第一次推送master分支的所有内容；

此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！